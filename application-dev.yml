spring:
  aop:
    proxy-target-class: true
    auto: true
  rabbitmq:
    host: mq.tgcloud.net
    port: 5672
    username: admin
    password: admin
  redis:
    host: redis.tgcloud.net
    port: 6379
    # 数据库连接超时时间，2.0 中该参数的类型为Duration，这里在配置的时候需要指明单位
    timeout: 60s
    # 连接池配置，2.0中直接使用jedis或者lettuce配置连接池
    jedis:
      pool:
        # 最大空闲连接数
        max-idle: 500
        # 最小空闲连接数
        min-idle: 50
        # 等待可用连接的最大时间，负数为不限制
        max-wait:  -1s
        # 最大活跃连接数，负数为不限制
        max-active: -1
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计   ，'wall'用于防火墙
    filters: stat,wall,slf4j
    druid:
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-milli: 300000
      web-stat-filter:
              exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
      # Oracle请使用select 1 from dual
      validation-query: SELECT 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20

feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
#// 这里获取了四个参数，ReadTimeout，ConnectTimeout，MaxAutoRetries， MaxAutoRetriesNextServer
#        int ribbonReadTimeout = getTimeout(config, commandKey, "ReadTimeout",
#            IClientConfigKey.Keys.ReadTimeout, RibbonClientConfiguration.DEFAULT_READ_TIMEOUT);
#        int ribbonConnectTimeout = getTimeout(config, commandKey, "ConnectTimeout",
#            IClientConfigKey.Keys.ConnectTimeout, RibbonClientConfiguration.DEFAULT_CONNECT_TIMEOUT);
#        int maxAutoRetries = getTimeout(config, commandKey, "MaxAutoRetries",
#            IClientConfigKey.Keys.MaxAutoRetries, DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES);
#        int maxAutoRetriesNextServer = getTimeout(config, commandKey, "MaxAutoRetriesNextServer",
#            IClientConfigKey.Keys.MaxAutoRetriesNextServer, DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER);
#        // 原来ribbonTimeout的计算方法在这里，以上文的设置为例
#        // ribbonTimeout = (2000 + 2000) * (1 + 1) * (2 + 1) = 24000
#        ribbonTimeout = (ribbonReadTimeout + ribbonConnectTimeout) * (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1);
#ribbonTimeout 是最终ribbon的过期时间 这个时间应该比hystrix的过期时间要短
ribbon:
  eager-load:
    enabled: true
  MaxAutoRetries: 1 #同一台实例最大重试次数,不包括首次调用
  MaxAutoRetriesNextServer: 2 #重试负载均衡其他的实例最大重试次数,不包括首次调用
  #OKToRetryOnAllOperations的意义是无论是请求超时或者socket read timeout都进行重试，false只会对get请求进行重试
  OkToRetryOnAllOperations: false
  ConnectTimeout: 2000
  ReadTimeout: 2000
hystrix:
  propagate:
    request-attribute:
      enabled: true
  command:
    default:
      execution:
        timeout:
          enabled: true #启用Hystrix的超时时间
        isolation:
          thread:
            timeoutInMilliseconds: 24000 #配置是让Hystrix的超时时间改为24秒

#客户端版本号，在监控中心显示
info:
  owner: tigerphz
  version: 1.0-SNAPSHOT

logging:
  level.root: info
  level.com.tiger.tgcloud: debug
  path: logs/
  file: ${spring.application.name}.log